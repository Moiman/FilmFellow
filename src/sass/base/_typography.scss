@use "sass:map";

@use "../abstracts/" as abstracts;

// Titles
h2,
h3,
h4,
h5,
h6 {
  font-family: abstracts.$default-title-font;
  line-height: abstracts.$default-line-height;
  letter-spacing: abstracts.$title-letter-spacing;
}

h1,
.h1 {
  font-family: abstracts.$default-title-font;
  line-height: abstracts.$default-line-height;
  font-size: abstracts.$h1-font-size;
  font-weight: 400;
  letter-spacing: -1;
}

h2,
.h2 {
  font-size: abstracts.$h2-font-size;
  font-weight: 400;
}

h3,
.h3 {
  font-size: abstracts.$h3-font-size;
  font-weight: 400;
}

h4,
.h4 {
  font-size: abstracts.$h4-font-size;
  font-weight: 300;
}

h5,
.h5 {
  font-size: abstracts.$h5-font-size;
  font-weight: 400;
}

h6,
.h6 {
  letter-spacing: 0;
  font-size: abstracts.$h6-font-size;
  font-weight: 300;
}

// Links
a {
  font-family: abstracts.$default-title-font;
  font-size: abstracts.$a-font-size;
  font-weight: 400;
  color: abstracts.$primary-light;
}

a:hover {
  color: rgba(abstracts.$primary-light, 0.75);
  transition: 0.1s;
  transition-timing-function: ease-in-out;
}

a:active {
  color: abstracts.$primary-light;
}

a:focus-visible {
  outline: 2px solid map.get(map.get(abstracts.$highlight-colors, "yellow"), "default");
  outline-offset: 2px;
  border-radius: abstracts.$default-border-radius;
}

// .highlight-nav: colorful hover using highlight colors for when there is more than 1 link
// For active links you can give .active-link to have matching colorful underline when it matches to current path
// For active icons you can give .active-icon to make it matching color when it matched to current path
$total-colors: length(abstracts.$highlight-colors);

@for $i from 1 through $total-colors {
  $color: nth(map-keys(abstracts.$highlight-colors), $i);
  $default-color: map-get(map-get(abstracts.$highlight-colors, $color), default);

  .active-link:nth-child(#{$total-colors}n + #{$i}) {
    outline: 0;
    color: $default-color;
    box-shadow: inset 0 -4px $default-color;
    border-radius: 0;
  }

  .active-icon:nth-child(#{$total-colors}n + #{$i}) {
    outline: 0;
    color: $default-color;
  }

  .highlight-nav > a:nth-child(#{$total-colors}n + #{$i}) {
    &:hover {
      color: $default-color;
      border: 0;
    }

    &:focus-visible {
      outline: 2px solid map.get(map.get(abstracts.$highlight-colors, "yellow"), "default");
      outline-offset: 2px;
      border-radius: abstracts.$default-border-radius;
      color: $default-color;
      border: 0;
    }
  }
}

// Body text
p,
.description,
label {
  font-family: abstracts.$default-text-font;
  font-size: abstracts.$p-font-size;
  letter-spacing: abstracts.$text-letter-spacing;
}

p {
  font-weight: 400;
  line-height: abstracts.$default-line-height;
}

.description {
  font-weight: 300;
  font-style: italic;
  line-height: abstracts.$default-line-height;
  margin-bottom: 10px;
  white-space: pre-wrap;
}
.yellow-name-header {
  font-family: abstracts.$default-title-font;
  line-height: abstracts.$default-line-height;
  letter-spacing: abstracts.$title-letter-spacing;
  font-size: abstracts.$h4-font-size;
  font-weight: 300;

  a {
    font-size: abstracts.$h4-font-size;
    color: map.get(map.get(abstracts.$highlight-colors, "yellow"), "default");
  }

  a:hover {
    color: map.get(map.get(abstracts.$highlight-colors, "yellow"), "hover");
  }
}

// Colors
.yellow {
  color: map.get(map.get(abstracts.$highlight-colors, "yellow"), "default");
}

.cyan {
  color: map.get(map.get(abstracts.$highlight-colors, "cyan"), "default");
}

.pink {
  color: map.get(map.get(abstracts.$highlight-colors, "pink"), "default");
}

.grey {
  color: grey;
}
